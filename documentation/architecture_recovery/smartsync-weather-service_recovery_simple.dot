/* ------------------------------------------------------------ */
/* created with bunch v3 */
/* Objective Function value = 0.0*/
/* Smart Sync Weather Service Recovery */
/* ------------------------------------------------------------ */

digraph G {
size= "10,10";
rotate = 90;
subgraph cluster0 {
label = "(SS-L3):C:com.smartsync.controller.WeatherController";
color = black;
style = bold;

"java.util.Iterator"[label="java.util.Iterator",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.service.WeatherInformationService"[label="com.smartsync.service.WeatherInformationService",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.util.Date"[label="java.util.Date",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.service.WeatherInformationService"[label="C:com.smartsync.service.WeatherInformationService",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.lang.String"[label="java.lang.String",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.validator.ValidationError:getErrors()"[label="(M)com.smartsync.validator.ValidationError:getErrors()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.error.IllegalRequestFormatErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)"[label="M:com.smartsync.error.IllegalRequestFormatErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.model.WeatherInformation:<init>(java.lang.String,double,double,double,java.lang.String)"[label="M:com.smartsync.model.WeatherInformation:<init>(java.lang.String,double,double,double,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)java.util.Date:<init>()"[label="(O)java.util.Date:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.error.ErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String)"[label="M:com.smartsync.error.ErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)java.util.ArrayList:<init>()"[label="(O)java.util.ArrayList:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.validator.ValidationError:<init>(java.lang.String)"[label="M:com.smartsync.validator.ValidationError:<init>(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)"[label="M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherLocation:getId()"[label="(M)com.smartsync.model.WeatherLocation:getId()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherLocationRepository:delete(java.lang.Iterable)"[label="(I)com.smartsync.model.WeatherLocationRepository:delete(java.lang.Iterable)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherInformationRepository:delete(java.lang.Iterable)"[label="(I)com.smartsync.model.WeatherInformationRepository:delete(java.lang.Iterable)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)"[label="M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)java.util.Iterator:hasNext()"[label="(I)java.util.Iterator:hasNext()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherInformationRepository:findByWeatherLocationId(java.lang.Long)"[label="(I)com.smartsync.model.WeatherInformationRepository:findByWeatherLocationId(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)java.util.List:iterator()"[label="(I)java.util.List:iterator()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)java.util.Iterator:next()"[label="(I)java.util.Iterator:next()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)"[label="M:com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)org.springframework.validation.Errors:getAllErrors()"[label="(I)org.springframework.validation.Errors:getAllErrors()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.validator.ValidationError:addValidationError(java.lang.String)"[label="(M)com.smartsync.validator.ValidationError:addValidationError(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.validator.ValidationError:<init>(java.lang.String)"[label="(O)com.smartsync.validator.ValidationError:<init>(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)org.springframework.validation.ObjectError:getDefaultMessage()"[label="(M)org.springframework.validation.ObjectError:getDefaultMessage()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationById(java.lang.Long)"[label="M:com.smartsync.service.WeatherInformationService:getWeatherInformationById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)"[label="(O)com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)java.util.List:add(java.lang.Object)"[label="(I)java.util.List:add(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.validator.ValidationError:addValidationError(java.lang.String)"[label="M:com.smartsync.validator.ValidationError:addValidationError(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherLocationRepository:findByUserId(java.lang.Long)"[label="(I)com.smartsync.model.WeatherLocationRepository:findByUserId(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherService:getWeatherLocationsForUser(java.lang.Long)"[label="M:com.smartsync.service.WeatherService:getWeatherLocationsForUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherInformationService:deleteWeatherInformationById(java.lang.Long)"[label="M:com.smartsync.service.WeatherInformationService:deleteWeatherInformationById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherInformationRepository:delete(java.lang.Object)"[label="(I)com.smartsync.model.WeatherInformationRepository:delete(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.Object:equals(java.lang.Object)"[label="(M)java.lang.Object:equals(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.validator.WeatherValidator:supports(java.lang.Class)"[label="M:com.smartsync.validator.WeatherValidator:supports(java.lang.Class)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.validator.ValidationError"[label="C:com.smartsync.validator.ValidationError",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.util.ArrayList"[label="java.util.ArrayList",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.config.WebConfig"[label="com.smartsync.config.WebConfig",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.config.WebConfig"[label="C:com.smartsync.config.WebConfig",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter"[label="org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.web.servlet.config.annotation.CorsRegistry"[label="org.springframework.web.servlet.config.annotation.CorsRegistry",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.web.servlet.config.annotation.CorsRegistration"[label="org.springframework.web.servlet.config.annotation.CorsRegistration",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.service.WeatherUndergroundService"[label="com.smartsync.service.WeatherUndergroundService",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.util.List"[label="java.util.List",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.service.WeatherService"[label="C:com.smartsync.service.WeatherService",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.service.WeatherService"[label="com.smartsync.service.WeatherService",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.validator.ValidationErrorBuilder"[label="com.smartsync.validator.ValidationErrorBuilder",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.validation.ObjectError"[label="org.springframework.validation.ObjectError",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.validator.ValidationError"[label="com.smartsync.validator.ValidationError",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.validator.ValidationErrorBuilder"[label="C:com.smartsync.validator.ValidationErrorBuilder",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.model.WeatherLocation"[label="com.smartsync.model.WeatherLocation",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.model.WeatherLocation"[label="C:com.smartsync.model.WeatherLocation",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter:<init>()"[label="(O)org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.config.WebConfig:<init>()"[label="M:com.smartsync.config.WebConfig:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.error.ErrorInfo"[label="com.smartsync.error.ErrorInfo",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.error.ErrorInfo"[label="C:com.smartsync.error.ErrorInfo",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.controller.WeatherController"[label="C:com.smartsync.controller.WeatherController",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.validator.WeatherValidator"[label="com.smartsync.validator.WeatherValidator",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.http.ResponseEntity$BodyBuilder"[label="org.springframework.http.ResponseEntity$BodyBuilder",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"model.UserPOJO"[label="model.UserPOJO",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.http.HttpStatus"[label="org.springframework.http.HttpStatus",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"communication.UserServiceCommunication"[label="communication.UserServiceCommunication",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.http.ResponseEntity"[label="org.springframework.http.ResponseEntity",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.apache.log4j.Logger"[label="org.apache.log4j.Logger",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.controller.WeatherController"[label="com.smartsync.controller.WeatherController",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherInformation:setWeatherLocation(com.smartsync.model.WeatherLocation)"[label="(M)com.smartsync.model.WeatherInformation:setWeatherLocation(com.smartsync.model.WeatherLocation)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.model.WeatherInformation:<init>(java.lang.String,double,double,double,java.lang.String)"[label="(O)com.smartsync.model.WeatherInformation:<init>(java.lang.String,double,double,double,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.model.WeatherLocation:<init>(com.smartsync.dto.WeatherLocationDTO)"[label="(O)com.smartsync.model.WeatherLocation:<init>(com.smartsync.dto.WeatherLocationDTO)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherLocationRepository:save(java.lang.Object)"[label="(I)com.smartsync.model.WeatherLocationRepository:save(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)"[label="M:com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.service.WeatherUndergroundService:<init>()"[label="(O)com.smartsync.service.WeatherUndergroundService:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)"[label="(M)com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherInformationRepository:save(java.lang.Object)"[label="(I)com.smartsync.model.WeatherInformationRepository:save(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherInformation:setLastUpdated(java.util.Date)"[label="(M)com.smartsync.model.WeatherInformation:setLastUpdated(java.util.Date)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherInformation:getLastUpdated()"[label="(M)com.smartsync.model.WeatherInformation:getLastUpdated()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherLocation:getState()"[label="(M)com.smartsync.model.WeatherLocation:getState()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.dto.WeatherUndergroundDTO:getWeather()"[label="(M)com.smartsync.dto.WeatherUndergroundDTO:getWeather()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherInformation:setWeather(java.lang.String)"[label="(M)com.smartsync.model.WeatherInformation:setWeather(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.util.Date:getTime()"[label="(M)java.util.Date:getTime()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.dto.WeatherUndergroundDTO:getWindSpeed()"[label="(M)com.smartsync.dto.WeatherUndergroundDTO:getWindSpeed()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherInformation:setWindSpeed(double)"[label="(M)com.smartsync.model.WeatherInformation:setWindSpeed(double)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherInformation:setFeelsLikeTemperature(double)"[label="(M)com.smartsync.model.WeatherInformation:setFeelsLikeTemperature(double)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.dto.WeatherUndergroundDTO:getFeelsLikeTemperature()"[label="(M)com.smartsync.dto.WeatherUndergroundDTO:getFeelsLikeTemperature()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.dto.WeatherUndergroundDTO:getTemperature()"[label="(M)com.smartsync.dto.WeatherUndergroundDTO:getTemperature()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherInformation:setTemperature(double)"[label="(M)com.smartsync.model.WeatherInformation:setTemperature(double)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherLocation:getCity()"[label="(M)com.smartsync.model.WeatherLocation:getCity()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherInformation:getWeatherLocation()"[label="(M)com.smartsync.model.WeatherInformation:getWeatherLocation()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.dto.WeatherUndergroundDTO:getWindDirection()"[label="(M)com.smartsync.dto.WeatherUndergroundDTO:getWindDirection()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)"[label="M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.model.WeatherInformation:setWindDirection(java.lang.String)"[label="(M)com.smartsync.model.WeatherInformation:setWindDirection(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherLocationRepository:findById(java.lang.Long)"[label="(I)com.smartsync.model.WeatherLocationRepository:findById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherService:getWeatherLocationById(java.lang.Long)"[label="M:com.smartsync.service.WeatherService:getWeatherLocationById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationById(java.lang.Long)"[label="M:com.smartsync.service.WeatherService:deleteWeatherLocationById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherLocationRepository:delete(java.lang.Object)"[label="(I)com.smartsync.model.WeatherLocationRepository:delete(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
}
subgraph cluster1 {
label = "(SS-L3):(O)java.lang.Object:<init>()";
color = black;
style = bold;

"(M)com.smartsync.service.WeatherService:getWeatherLocationById(java.lang.Long)"[label="(M)com.smartsync.service.WeatherService:getWeatherLocationById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)org.apache.log4j.Logger:error(java.lang.Object)"[label="(M)org.apache.log4j.Logger:error(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)"[label="M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)"[label="(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)"[label="(M)com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.StringBuilder:toString()"[label="(M)java.lang.StringBuilder:toString()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)"[label="M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.validator.WeatherValidator:<init>()"[label="(O)com.smartsync.validator.WeatherValidator:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)"[label="(M)com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(S)com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)"[label="(S)com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.StringBuilder:append(java.lang.Object)"[label="(M)java.lang.StringBuilder:append(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.error.IllegalRequestFormatException:<init>(java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)"[label="(O)com.smartsync.error.IllegalRequestFormatException:<init>(java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)java.lang.StringBuilder:<init>()"[label="(O)java.lang.StringBuilder:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherService:getWeatherLocationsForUser(java.lang.Long)"[label="(M)com.smartsync.service.WeatherService:getWeatherLocationsForUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)"[label="M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.error.UserNotFoundException:<init>(java.lang.String,java.lang.String)"[label="(O)com.smartsync.error.UserNotFoundException:<init>(java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)"[label="M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)"[label="(M)com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)communication.UserServiceCommunication:<init>()"[label="(O)communication.UserServiceCommunication:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)"[label="M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)"[label="(M)com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)org.apache.log4j.Logger:info(java.lang.Object)"[label="(M)org.apache.log4j.Logger:info(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)communication.UserServiceCommunication:getUser(java.lang.Long)"[label="(M)communication.UserServiceCommunication:getUser(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:getAllWeatherLocations()"[label="M:com.smartsync.controller.WeatherController:getAllWeatherLocations()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherService:getAllWeather()"[label="(M)com.smartsync.service.WeatherService:getAllWeather()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)"[label="M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)java.io.InputStreamReader:<init>(java.io.InputStream)"[label="(O)java.io.InputStreamReader:<init>(java.io.InputStream)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.net.URL:openStream()"[label="(M)java.net.URL:openStream()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)java.io.BufferedReader:<init>(java.io.Reader)"[label="(O)java.io.BufferedReader:<init>(java.io.Reader)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.Exception:printStackTrace()"[label="(M)java.lang.Exception:printStackTrace()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)java.net.URL:<init>(java.lang.String)"[label="(O)java.net.URL:<init>(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.io.BufferedReader:readLine()"[label="(M)java.io.BufferedReader:readLine()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.SmartsyncWeatherServiceApplication"[label="com.smartsync.SmartsyncWeatherServiceApplication",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.SmartsyncWeatherServiceApplication"[label="C:com.smartsync.SmartsyncWeatherServiceApplication",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.boot.SpringApplication"[label="org.springframework.boot.SpringApplication",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.error.IllegalRequestFormatException"[label="com.smartsync.error.IllegalRequestFormatException",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.error.IllegalRequestFormatException"[label="C:com.smartsync.error.IllegalRequestFormatException",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)org.springframework.validation.Errors:rejectValue(java.lang.String,java.lang.String,java.lang.String)"[label="(I)org.springframework.validation.Errors:rejectValue(java.lang.String,java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(S)org.springframework.validation.ValidationUtils:rejectIfEmptyOrWhitespace(org.springframework.validation.Errors,java.lang.String,java.lang.String,java.lang.String)"[label="(S)org.springframework.validation.ValidationUtils:rejectIfEmptyOrWhitespace(org.springframework.validation.Errors,java.lang.String,java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.String:length()"[label="(M)java.lang.String:length()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)"[label="M:com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)org.springframework.validation.Errors:hasErrors()"[label="(I)org.springframework.validation.Errors:hasErrors()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.SmartsyncWeatherServiceApplication:<init>()"[label="M:com.smartsync.SmartsyncWeatherServiceApplication:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.validator.WeatherValidator:<init>()"[label="M:com.smartsync.validator.WeatherValidator:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.dto.WeatherLocationDTO:<init>()"[label="M:com.smartsync.dto.WeatherLocationDTO:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.dto.WeatherLocationDTO:<init>(java.lang.Long,java.lang.String,java.lang.String)"[label="M:com.smartsync.dto.WeatherLocationDTO:<init>(java.lang.Long,java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.error.IllegalRequestFormatErrorInfo:<init>()"[label="M:com.smartsync.error.IllegalRequestFormatErrorInfo:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.error.ErrorInfo:<init>()"[label="M:com.smartsync.error.ErrorInfo:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.model.WeatherInformation:<init>()"[label="M:com.smartsync.model.WeatherInformation:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.model.WeatherLocation:<init>()"[label="M:com.smartsync.model.WeatherLocation:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.dto.WeatherUndergroundDTO:<init>(java.lang.String,double,double,double,java.lang.String)"[label="M:com.smartsync.dto.WeatherUndergroundDTO:<init>(java.lang.String,double,double,double,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.model.WeatherLocation:<init>(java.lang.Long,java.lang.String,java.lang.String)"[label="M:com.smartsync.model.WeatherLocation:<init>(java.lang.Long,java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherService:<init>()"[label="M:com.smartsync.service.WeatherService:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)java.lang.Object:<init>()"[label="(O)java.lang.Object:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.util.HttpUtil:<init>()"[label="M:com.smartsync.util.HttpUtil:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.validator.ValidationErrorBuilder:<init>()"[label="M:com.smartsync.validator.ValidationErrorBuilder:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherInformationService:<init>()"[label="M:com.smartsync.service.WeatherInformationService:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.model.WeatherLocation:<init>(com.smartsync.dto.WeatherLocationDTO)"[label="M:com.smartsync.model.WeatherLocation:<init>(com.smartsync.dto.WeatherLocationDTO)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.dto.WeatherLocationDTO:getCity()"[label="(M)com.smartsync.dto.WeatherLocationDTO:getCity()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.dto.WeatherLocationDTO:getUserId()"[label="(M)com.smartsync.dto.WeatherLocationDTO:getUserId()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.dto.WeatherLocationDTO:getState()"[label="(M)com.smartsync.dto.WeatherLocationDTO:getState()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherInformationService:getWeatherInformationById(java.lang.Long)"[label="(M)com.smartsync.service.WeatherInformationService:getWeatherInformationById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.error.WeatherNotFoundException:<init>(java.lang.String,java.lang.String)"[label="(O)com.smartsync.error.WeatherNotFoundException:<init>(java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)"[label="M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:getAllWeatherInformation()"[label="M:com.smartsync.controller.WeatherController:getAllWeatherInformation()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherInformationService:getAllWeatherInformation()"[label="(M)com.smartsync.service.WeatherInformationService:getAllWeatherInformation()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherUndergroundService:<init>()"[label="M:com.smartsync.service.WeatherUndergroundService:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(S)java.util.logging.Logger:getLogger(java.lang.String)"[label="(S)java.util.logging.Logger:getLogger(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.Class:toString()"[label="(M)java.lang.Class:toString()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherInformationService:deleteWeatherInformationById(java.lang.Long)"[label="(M)com.smartsync.service.WeatherInformationService:deleteWeatherInformationById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.service.WeatherService:deleteWeatherLocationById(java.lang.Long)"[label="(M)com.smartsync.service.WeatherService:deleteWeatherLocationById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)"[label="M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.StringBuilder:append(double)"[label="(M)java.lang.StringBuilder:append(double)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.model.WeatherInformation:toString()"[label="M:com.smartsync.model.WeatherInformation:toString()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.StringBuilder:append(java.lang.String)"[label="(M)java.lang.StringBuilder:append(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.StringBuilder:append(char)"[label="(M)java.lang.StringBuilder:append(char)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.model.WeatherLocation:toString()"[label="M:com.smartsync.model.WeatherLocation:toString()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(S)com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)"[label="(S)com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.util.logging.Logger:info(java.lang.String)"[label="(M)java.util.logging.Logger:info(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)"[label="M:com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)"[label="(O)com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.String:replaceAll(java.lang.String,java.lang.String)"[label="(M)java.lang.String:replaceAll(java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(S)org.apache.log4j.Logger:getLogger(java.lang.Class)"[label="(S)org.apache.log4j.Logger:getLogger(java.lang.Class)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)java.lang.Object:getClass()"[label="(M)java.lang.Object:getClass()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:<init>()"[label="M:com.smartsync.controller.WeatherController:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
}
subgraph cluster2 {
label = "(SS-L3):C:com.smartsync.service.WeatherUndergroundService";
color = black;
style = bold;

"C:com.smartsync.dto.WeatherUndergroundDTO"[label="C:com.smartsync.dto.WeatherUndergroundDTO",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.dto.WeatherUndergroundDTO"[label="com.smartsync.dto.WeatherUndergroundDTO",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.lang.Class"[label="java.lang.Class",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.google.gson.JsonElement"[label="com.google.gson.JsonElement",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.util.HttpUtil"[label="com.smartsync.util.HttpUtil",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.service.WeatherUndergroundService"[label="C:com.smartsync.service.WeatherUndergroundService",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.util.logging.Logger"[label="java.util.logging.Logger",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.google.gson.Gson"[label="com.google.gson.Gson",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.google.gson.JsonObject"[label="com.google.gson.JsonObject",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.google.gson.JsonElement:getAsJsonObject()"[label="(M)com.google.gson.JsonElement:getAsJsonObject()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.google.gson.Gson:<init>()"[label="(O)com.google.gson.Gson:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.google.gson.JsonElement:getAsString()"[label="(M)com.google.gson.JsonElement:getAsString()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.google.gson.JsonElement:getAsDouble()"[label="(M)com.google.gson.JsonElement:getAsDouble()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.dto.WeatherUndergroundDTO:<init>(java.lang.String,double,double,double,java.lang.String)"[label="(O)com.smartsync.dto.WeatherUndergroundDTO:<init>(java.lang.String,double,double,double,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.google.gson.JsonObject:get(java.lang.String)"[label="(M)com.google.gson.JsonObject:get(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)"[label="M:com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.google.gson.Gson:fromJson(java.lang.String,java.lang.Class)"[label="(M)com.google.gson.Gson:fromJson(java.lang.String,java.lang.Class)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.io.InputStreamReader"[label="java.io.InputStreamReader",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.net.URL"[label="java.net.URL",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.util.HttpUtil"[label="C:com.smartsync.util.HttpUtil",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.io.BufferedReader"[label="java.io.BufferedReader",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.io.InputStream"[label="java.io.InputStream",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.lang.Exception"[label="java.lang.Exception",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.model.WeatherInformation"[label="com.smartsync.model.WeatherInformation",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.model.WeatherInformation"[label="C:com.smartsync.model.WeatherInformation",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.lang.StringBuilder"[label="java.lang.StringBuilder",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.error.WeatherNotFoundException"[label="C:com.smartsync.error.WeatherNotFoundException",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"java.lang.RuntimeException"[label="java.lang.RuntimeException",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.error.WeatherNotFoundException"[label="com.smartsync.error.WeatherNotFoundException",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.error.UserNotFoundException"[label="C:com.smartsync.error.UserNotFoundException",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.error.UserNotFoundException"[label="com.smartsync.error.UserNotFoundException",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
}
subgraph cluster3 {
label = "(SS-L3):C:com.smartsync.validator.WeatherValidator";
color = black;
style = bold;

"com.smartsync.model.WeatherInformationRepository"[label="com.smartsync.model.WeatherInformationRepository",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.model.WeatherInformationRepository"[label="C:com.smartsync.model.WeatherInformationRepository",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.data.jpa.repository.JpaRepository"[label="org.springframework.data.jpa.repository.JpaRepository",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.model.WeatherLocationRepository"[label="C:com.smartsync.model.WeatherLocationRepository",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.model.WeatherLocationRepository"[label="com.smartsync.model.WeatherLocationRepository",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherInformationService:getAllWeatherInformation()"[label="M:com.smartsync.service.WeatherInformationService:getAllWeatherInformation()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherInformationRepository:findAll()"[label="(I)com.smartsync.model.WeatherInformationRepository:findAll()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)java.lang.RuntimeException:<init>()"[label="(O)java.lang.RuntimeException:<init>()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.error.UserNotFoundException:<init>(java.lang.String,java.lang.String)"[label="M:com.smartsync.error.UserNotFoundException:<init>(java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.error.WeatherNotFoundException:<init>(java.lang.String,java.lang.String)"[label="M:com.smartsync.error.WeatherNotFoundException:<init>(java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.error.IllegalRequestFormatException:<init>(java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)"[label="M:com.smartsync.error.IllegalRequestFormatException:<init>(java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.validator.WeatherValidator"[label="C:com.smartsync.validator.WeatherValidator",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.validation.Validator"[label="org.springframework.validation.Validator",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.validation.ValidationUtils"[label="org.springframework.validation.ValidationUtils",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"org.springframework.validation.Errors"[label="org.springframework.validation.Errors",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.dto.WeatherLocationDTO"[label="C:com.smartsync.dto.WeatherLocationDTO",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.dto.WeatherLocationDTO"[label="com.smartsync.dto.WeatherLocationDTO",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
}
subgraph cluster4 {
label = "(SS-L3):M:com.smartsync.controller.WeatherController:handleIllegalRequestFormatException(com.smartsync.error.IllegalRequestFormatException)";
color = black;
style = bold;

"(O)com.smartsync.error.ErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String)"[label="(O)com.smartsync.error.ErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.error.WeatherNotFoundException:getUrl()"[label="(M)com.smartsync.error.WeatherNotFoundException:getUrl()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:handleWeatherNotFoundException(com.smartsync.error.WeatherNotFoundException)"[label="M:com.smartsync.controller.WeatherController:handleWeatherNotFoundException(com.smartsync.error.WeatherNotFoundException)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.error.WeatherNotFoundException:getMessage()"[label="(M)com.smartsync.error.WeatherNotFoundException:getMessage()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.error.IllegalRequestFormatException:getUrl()"[label="(M)com.smartsync.error.IllegalRequestFormatException:getUrl()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.error.IllegalRequestFormatException:getMessage()"[label="(M)com.smartsync.error.IllegalRequestFormatException:getMessage()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:handleIllegalRequestFormatException(com.smartsync.error.IllegalRequestFormatException)"[label="M:com.smartsync.controller.WeatherController:handleIllegalRequestFormatException(com.smartsync.error.IllegalRequestFormatException)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.error.IllegalRequestFormatException:getErrors()"[label="(M)com.smartsync.error.IllegalRequestFormatException:getErrors()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(O)com.smartsync.error.IllegalRequestFormatErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)"[label="(O)com.smartsync.error.IllegalRequestFormatErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(S)org.springframework.http.ResponseEntity:status(org.springframework.http.HttpStatus)"[label="(S)org.springframework.http.ResponseEntity:status(org.springframework.http.HttpStatus)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)org.springframework.http.ResponseEntity$BodyBuilder:body(java.lang.Object)"[label="(I)org.springframework.http.ResponseEntity$BodyBuilder:body(java.lang.Object)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.error.UserNotFoundException:getUrl()"[label="(M)com.smartsync.error.UserNotFoundException:getUrl()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.controller.WeatherController:handleUserNotFoundException(com.smartsync.error.UserNotFoundException)"[label="M:com.smartsync.controller.WeatherController:handleUserNotFoundException(com.smartsync.error.UserNotFoundException)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)com.smartsync.error.UserNotFoundException:getMessage()"[label="(M)com.smartsync.error.UserNotFoundException:getMessage()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(S)org.springframework.boot.SpringApplication:run(java.lang.Object,java.lang.String[])"[label="(S)org.springframework.boot.SpringApplication:run(java.lang.Object,java.lang.String[])",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.SmartsyncWeatherServiceApplication:main(java.lang.String[])"[label="M:com.smartsync.SmartsyncWeatherServiceApplication:main(java.lang.String[])",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
}
subgraph cluster5 {
label = "(SS-L3):M:com.smartsync.config.WebConfig:addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)";
color = black;
style = bold;

"(M)org.springframework.web.servlet.config.annotation.CorsRegistration:maxAge(long)"[label="(M)org.springframework.web.servlet.config.annotation.CorsRegistration:maxAge(long)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)org.springframework.web.servlet.config.annotation.CorsRegistration:allowedMethods(java.lang.String[])"[label="(M)org.springframework.web.servlet.config.annotation.CorsRegistration:allowedMethods(java.lang.String[])",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.config.WebConfig:addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)"[label="M:com.smartsync.config.WebConfig:addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)org.springframework.web.servlet.config.annotation.CorsRegistration:allowedOrigins(java.lang.String[])"[label="(M)org.springframework.web.servlet.config.annotation.CorsRegistration:allowedOrigins(java.lang.String[])",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)org.springframework.web.servlet.config.annotation.CorsRegistration:allowCredentials(boolean)"[label="(M)org.springframework.web.servlet.config.annotation.CorsRegistration:allowCredentials(boolean)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(M)org.springframework.web.servlet.config.annotation.CorsRegistry:addMapping(java.lang.String)"[label="(M)org.springframework.web.servlet.config.annotation.CorsRegistry:addMapping(java.lang.String)",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"(I)com.smartsync.model.WeatherLocationRepository:findAll()"[label="(I)com.smartsync.model.WeatherLocationRepository:findAll()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"M:com.smartsync.service.WeatherService:getAllWeather()"[label="M:com.smartsync.service.WeatherService:getAllWeather()",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
}
subgraph cluster6 {
label = "(SS-L3):java.lang.Object";
color = black;
style = bold;

"java.lang.Object"[label="java.lang.Object",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"C:com.smartsync.error.IllegalRequestFormatErrorInfo"[label="C:com.smartsync.error.IllegalRequestFormatErrorInfo",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
"com.smartsync.error.IllegalRequestFormatErrorInfo"[label="com.smartsync.error.IllegalRequestFormatErrorInfo",shape=ellipse,color=lightblue,fontcolor=black,style=filled];
}
"M:com.smartsync.error.UserNotFoundException:<init>(java.lang.String,java.lang.String)" -> "(O)java.lang.RuntimeException:<init>()" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.SmartsyncWeatherServiceApplication:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)" -> "(M)com.smartsync.service.WeatherService:getWeatherLocationById(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)" -> "(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)" -> "(O)com.smartsync.error.WeatherNotFoundException:<init>(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationById(java.lang.Long)" -> "(M)org.apache.log4j.Logger:error(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" -> "(O)java.util.ArrayList:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" -> "(I)java.util.List:add(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" -> "(I)com.smartsync.model.WeatherInformationRepository:findByWeatherLocationId(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" -> "(O)com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" -> "(I)com.smartsync.model.WeatherLocationRepository:findByUserId(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" -> "(I)java.util.Iterator:next()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" -> "(I)java.util.Iterator:hasNext()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" -> "(I)java.util.List:iterator()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" -> "(M)com.smartsync.model.WeatherLocation:getId()" [color=blue,font=6];
"M:com.smartsync.model.WeatherInformation:<init>(java.lang.String,double,double,double,java.lang.String)" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.model.WeatherInformation:<init>(java.lang.String,double,double,double,java.lang.String)" -> "(O)java.util.Date:<init>()" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" -> "(M)java.lang.Exception:printStackTrace()" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" -> "(M)java.io.BufferedReader:readLine()" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" -> "(M)java.net.URL:openStream()" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" -> "(O)java.io.InputStreamReader:<init>(java.io.InputStream)" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" -> "(O)java.net.URL:<init>(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" -> "(O)java.io.BufferedReader:<init>(java.io.Reader)" [color=blue,font=6];
"M:com.smartsync.dto.WeatherUndergroundDTO:<init>(java.lang.String,double,double,double,java.lang.String)" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"C:com.smartsync.dto.WeatherLocationDTO" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.dto.WeatherLocationDTO" -> "com.smartsync.dto.WeatherLocationDTO" [color=blue,font=6];
"M:com.smartsync.validator.WeatherValidator:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:getWeatherLocationsForUser(java.lang.Long)" -> "(I)com.smartsync.model.WeatherLocationRepository:findByUserId(java.lang.Long)" [color=blue,font=6];
"C:com.smartsync.error.IllegalRequestFormatException" -> "java.lang.RuntimeException" [color=blue,font=6];
"C:com.smartsync.error.IllegalRequestFormatException" -> "com.smartsync.error.IllegalRequestFormatException" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "java.lang.StringBuilder" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "com.smartsync.dto.WeatherUndergroundDTO" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "java.lang.Class" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "com.google.gson.JsonElement" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "com.smartsync.service.WeatherUndergroundService" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "java.util.logging.Logger" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "com.smartsync.util.HttpUtil" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "java.lang.String" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "com.google.gson.JsonObject" [color=blue,font=6];
"C:com.smartsync.service.WeatherUndergroundService" -> "com.google.gson.Gson" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherLocation:getCity()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(O)java.util.Date:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.dto.WeatherUndergroundDTO:getWindDirection()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.dto.WeatherUndergroundDTO:getWindSpeed()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherLocation:getState()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherInformation:setTemperature(double)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherInformation:setWindDirection(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.dto.WeatherUndergroundDTO:getWeather()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(I)com.smartsync.model.WeatherInformationRepository:save(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)java.util.Date:getTime()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherInformation:getLastUpdated()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(O)com.smartsync.service.WeatherUndergroundService:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherInformation:getWeatherLocation()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherInformation:setFeelsLikeTemperature(double)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.dto.WeatherUndergroundDTO:getFeelsLikeTemperature()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherInformation:setWeather(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.dto.WeatherUndergroundDTO:getTemperature()" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherInformation:setWindSpeed(double)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" -> "(M)com.smartsync.model.WeatherInformation:setLastUpdated(java.util.Date)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(O)com.smartsync.error.UserNotFoundException:<init>(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(O)communication.UserServiceCommunication:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(M)org.apache.log4j.Logger:error(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(M)com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(M)org.apache.log4j.Logger:info(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteAllWeatherForUser(java.lang.Long)" -> "(M)communication.UserServiceCommunication:getUser(java.lang.Long)" [color=blue,font=6];
"C:com.smartsync.util.HttpUtil" -> "java.lang.StringBuilder" [color=blue,font=6];
"C:com.smartsync.util.HttpUtil" -> "java.io.InputStream" [color=blue,font=6];
"C:com.smartsync.util.HttpUtil" -> "java.net.URL" [color=blue,font=6];
"C:com.smartsync.util.HttpUtil" -> "com.smartsync.util.HttpUtil" [color=blue,font=6];
"C:com.smartsync.util.HttpUtil" -> "java.io.InputStreamReader" [color=blue,font=6];
"C:com.smartsync.util.HttpUtil" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.util.HttpUtil" -> "java.io.BufferedReader" [color=blue,font=6];
"C:com.smartsync.util.HttpUtil" -> "java.lang.String" [color=blue,font=6];
"C:com.smartsync.util.HttpUtil" -> "java.lang.Exception" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleIllegalRequestFormatException(com.smartsync.error.IllegalRequestFormatException)" -> "(M)com.smartsync.error.IllegalRequestFormatException:getMessage()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleIllegalRequestFormatException(com.smartsync.error.IllegalRequestFormatException)" -> "(M)com.smartsync.error.IllegalRequestFormatException:getUrl()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleIllegalRequestFormatException(com.smartsync.error.IllegalRequestFormatException)" -> "(O)com.smartsync.error.IllegalRequestFormatErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleIllegalRequestFormatException(com.smartsync.error.IllegalRequestFormatException)" -> "(I)org.springframework.http.ResponseEntity$BodyBuilder:body(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleIllegalRequestFormatException(com.smartsync.error.IllegalRequestFormatException)" -> "(S)org.springframework.http.ResponseEntity:status(org.springframework.http.HttpStatus)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleIllegalRequestFormatException(com.smartsync.error.IllegalRequestFormatException)" -> "(M)com.smartsync.error.IllegalRequestFormatException:getErrors()" [color=blue,font=6];
"C:com.smartsync.model.WeatherLocation" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.model.WeatherLocation" -> "com.smartsync.dto.WeatherLocationDTO" [color=blue,font=6];
"C:com.smartsync.model.WeatherLocation" -> "com.smartsync.model.WeatherLocation" [color=blue,font=6];
"C:com.smartsync.model.WeatherLocation" -> "java.lang.StringBuilder" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:getWeatherLocationById(java.lang.Long)" -> "(I)com.smartsync.model.WeatherLocationRepository:findById(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleUserNotFoundException(com.smartsync.error.UserNotFoundException)" -> "(M)com.smartsync.error.UserNotFoundException:getUrl()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleUserNotFoundException(com.smartsync.error.UserNotFoundException)" -> "(M)com.smartsync.error.UserNotFoundException:getMessage()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleUserNotFoundException(com.smartsync.error.UserNotFoundException)" -> "(I)org.springframework.http.ResponseEntity$BodyBuilder:body(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleUserNotFoundException(com.smartsync.error.UserNotFoundException)" -> "(O)com.smartsync.error.ErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleUserNotFoundException(com.smartsync.error.UserNotFoundException)" -> "(S)org.springframework.http.ResponseEntity:status(org.springframework.http.HttpStatus)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)" -> "(M)com.smartsync.service.WeatherInformationService:getWeatherInformationById(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)" -> "(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)" -> "(O)com.smartsync.error.WeatherNotFoundException:<init>(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationByid(java.lang.Long)" -> "(M)org.apache.log4j.Logger:error(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.validator.ValidationErrorBuilder:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)" -> "(M)com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)" -> "(O)com.smartsync.model.WeatherInformation:<init>(java.lang.String,double,double,double,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)" -> "(I)com.smartsync.model.WeatherInformationRepository:save(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)" -> "(I)com.smartsync.model.WeatherLocationRepository:save(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)" -> "(M)com.smartsync.model.WeatherInformation:setWeatherLocation(com.smartsync.model.WeatherLocation)" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)" -> "(O)com.smartsync.service.WeatherUndergroundService:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)" -> "(O)com.smartsync.model.WeatherLocation:<init>(com.smartsync.dto.WeatherLocationDTO)" [color=blue,font=6];
"C:com.smartsync.dto.WeatherUndergroundDTO" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.dto.WeatherUndergroundDTO" -> "com.smartsync.dto.WeatherUndergroundDTO" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(O)com.smartsync.validator.WeatherValidator:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(M)com.smartsync.service.WeatherService:addWeather(com.smartsync.dto.WeatherLocationDTO)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(M)com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(O)com.smartsync.error.UserNotFoundException:<init>(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(O)com.smartsync.error.IllegalRequestFormatException:<init>(java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(M)com.smartsync.dto.WeatherLocationDTO:getUserId()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(O)communication.UserServiceCommunication:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(S)com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(M)org.apache.log4j.Logger:error(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(M)org.apache.log4j.Logger:info(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(M)java.lang.StringBuilder:append(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(M)communication.UserServiceCommunication:getUser(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:addWeather(com.smartsync.dto.WeatherLocationDTO,org.springframework.validation.Errors)" -> "(I)org.springframework.validation.Errors:hasErrors()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)" -> "(M)com.smartsync.service.WeatherService:deleteWeatherLocationById(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)" -> "(M)com.smartsync.service.WeatherInformationService:deleteWeatherInformationById(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)" -> "(M)org.apache.log4j.Logger:error(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)" -> "(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)" -> "(O)com.smartsync.error.WeatherNotFoundException:<init>(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:deleteWeatherById(java.lang.Long)" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleWeatherNotFoundException(com.smartsync.error.WeatherNotFoundException)" -> "(M)com.smartsync.error.WeatherNotFoundException:getUrl()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleWeatherNotFoundException(com.smartsync.error.WeatherNotFoundException)" -> "(M)com.smartsync.error.WeatherNotFoundException:getMessage()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleWeatherNotFoundException(com.smartsync.error.WeatherNotFoundException)" -> "(I)org.springframework.http.ResponseEntity$BodyBuilder:body(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleWeatherNotFoundException(com.smartsync.error.WeatherNotFoundException)" -> "(O)com.smartsync.error.ErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:handleWeatherNotFoundException(com.smartsync.error.WeatherNotFoundException)" -> "(S)org.springframework.http.ResponseEntity:status(org.springframework.http.HttpStatus)" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:<init>(com.smartsync.dto.WeatherLocationDTO)" -> "(M)com.smartsync.dto.WeatherLocationDTO:getCity()" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:<init>(com.smartsync.dto.WeatherLocationDTO)" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:<init>(com.smartsync.dto.WeatherLocationDTO)" -> "(M)com.smartsync.dto.WeatherLocationDTO:getState()" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:<init>(com.smartsync.dto.WeatherLocationDTO)" -> "(M)com.smartsync.dto.WeatherLocationDTO:getUserId()" [color=blue,font=6];
"C:com.smartsync.error.ErrorInfo" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.error.ErrorInfo" -> "com.smartsync.error.ErrorInfo" [color=blue,font=6];
"C:com.smartsync.error.ErrorInfo" -> "java.util.Date" [color=blue,font=6];
"M:com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)" -> "(M)com.smartsync.dto.WeatherLocationDTO:getState()" [color=blue,font=6];
"M:com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)" -> "(S)org.springframework.validation.ValidationUtils:rejectIfEmptyOrWhitespace(org.springframework.validation.Errors,java.lang.String,java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)" -> "(I)org.springframework.validation.Errors:rejectValue(java.lang.String,java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)" -> "(I)org.springframework.validation.Errors:hasErrors()" [color=blue,font=6];
"M:com.smartsync.validator.WeatherValidator:validate(java.lang.Object,org.springframework.validation.Errors)" -> "(M)java.lang.String:length()" [color=blue,font=6];
"M:com.smartsync.error.ErrorInfo:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:getAllWeather()" -> "(I)com.smartsync.model.WeatherLocationRepository:findAll()" [color=blue,font=6];
"C:com.smartsync.validator.WeatherValidator" -> "java.lang.String" [color=blue,font=6];
"C:com.smartsync.validator.WeatherValidator" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.validator.WeatherValidator" -> "com.smartsync.validator.WeatherValidator" [color=blue,font=6];
"C:com.smartsync.validator.WeatherValidator" -> "org.springframework.validation.Validator" [color=blue,font=6];
"C:com.smartsync.validator.WeatherValidator" -> "com.smartsync.dto.WeatherLocationDTO" [color=blue,font=6];
"C:com.smartsync.validator.WeatherValidator" -> "org.springframework.validation.ValidationUtils" [color=blue,font=6];
"C:com.smartsync.validator.WeatherValidator" -> "org.springframework.validation.Errors" [color=blue,font=6];
"M:com.smartsync.util.HttpUtil:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"C:com.smartsync.SmartsyncWeatherServiceApplication" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.SmartsyncWeatherServiceApplication" -> "com.smartsync.SmartsyncWeatherServiceApplication" [color=blue,font=6];
"C:com.smartsync.SmartsyncWeatherServiceApplication" -> "org.springframework.boot.SpringApplication" [color=blue,font=6];
"C:com.smartsync.model.WeatherInformation" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.model.WeatherInformation" -> "com.smartsync.model.WeatherInformation" [color=blue,font=6];
"C:com.smartsync.model.WeatherInformation" -> "java.util.Date" [color=blue,font=6];
"C:com.smartsync.model.WeatherInformation" -> "java.lang.StringBuilder" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:<init>(java.lang.Long,java.lang.String,java.lang.String)" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.model.WeatherInformation:toString()" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.model.WeatherInformation:toString()" -> "(M)java.lang.StringBuilder:append(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.model.WeatherInformation:toString()" -> "(M)java.lang.StringBuilder:append(char)" [color=blue,font=6];
"M:com.smartsync.model.WeatherInformation:toString()" -> "(M)java.lang.StringBuilder:append(double)" [color=blue,font=6];
"M:com.smartsync.model.WeatherInformation:toString()" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.model.WeatherInformation:toString()" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(O)com.smartsync.error.UserNotFoundException:<init>(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(M)com.smartsync.service.WeatherService:getWeatherLocationsForUser(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(O)communication.UserServiceCommunication:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(M)org.apache.log4j.Logger:error(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(M)org.apache.log4j.Logger:info(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherLocationsForUser(java.lang.Long)" -> "(M)communication.UserServiceCommunication:getUser(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.config.WebConfig:addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)" -> "(M)org.springframework.web.servlet.config.annotation.CorsRegistration:allowedMethods(java.lang.String[])" [color=blue,font=6];
"M:com.smartsync.config.WebConfig:addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)" -> "(M)org.springframework.web.servlet.config.annotation.CorsRegistration:maxAge(long)" [color=blue,font=6];
"M:com.smartsync.config.WebConfig:addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)" -> "(M)org.springframework.web.servlet.config.annotation.CorsRegistry:addMapping(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.config.WebConfig:addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)" -> "(M)org.springframework.web.servlet.config.annotation.CorsRegistration:allowCredentials(boolean)" [color=blue,font=6];
"M:com.smartsync.config.WebConfig:addCorsMappings(org.springframework.web.servlet.config.annotation.CorsRegistry)" -> "(M)org.springframework.web.servlet.config.annotation.CorsRegistration:allowedOrigins(java.lang.String[])" [color=blue,font=6];
"M:com.smartsync.error.IllegalRequestFormatErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.error.IllegalRequestFormatErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)" -> "(M)com.smartsync.validator.ValidationError:getErrors()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getAllWeatherLocations()" -> "(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getAllWeatherLocations()" -> "(M)com.smartsync.service.WeatherService:getAllWeather()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:<init>()" -> "(M)java.lang.Object:getClass()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:<init>()" -> "(M)java.lang.Class:toString()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:<init>()" -> "(S)java.util.logging.Logger:getLogger(java.lang.String)" [color=blue,font=6];
"C:com.smartsync.error.UserNotFoundException" -> "java.lang.RuntimeException" [color=blue,font=6];
"C:com.smartsync.error.UserNotFoundException" -> "com.smartsync.error.UserNotFoundException" [color=blue,font=6];
"C:com.smartsync.config.WebConfig" -> "java.lang.String" [color=blue,font=6];
"C:com.smartsync.config.WebConfig" -> "org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter" [color=blue,font=6];
"C:com.smartsync.config.WebConfig" -> "com.smartsync.config.WebConfig" [color=blue,font=6];
"C:com.smartsync.config.WebConfig" -> "org.springframework.web.servlet.config.annotation.CorsRegistry" [color=blue,font=6];
"C:com.smartsync.config.WebConfig" -> "org.springframework.web.servlet.config.annotation.CorsRegistration" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "java.util.List" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "java.util.ArrayList" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "com.smartsync.dto.WeatherUndergroundDTO" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "com.smartsync.service.WeatherInformationService" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "java.util.Iterator" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "com.smartsync.service.WeatherUndergroundService" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "com.smartsync.model.WeatherLocationRepository" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "com.smartsync.model.WeatherInformation" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "com.smartsync.model.WeatherInformationRepository" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "java.lang.String" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "java.util.Date" [color=blue,font=6];
"C:com.smartsync.service.WeatherInformationService" -> "com.smartsync.model.WeatherLocation" [color=blue,font=6];
"M:com.smartsync.validator.ValidationError:addValidationError(java.lang.String)" -> "(I)java.util.List:add(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:deleteWeatherInformationById(java.lang.Long)" -> "(I)com.smartsync.model.WeatherInformationRepository:delete(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:deleteWeatherInformationById(java.lang.Long)" -> "(I)com.smartsync.model.WeatherInformationRepository:findByWeatherLocationId(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:<init>()" -> "(S)org.apache.log4j.Logger:getLogger(java.lang.Class)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:<init>()" -> "(M)java.lang.Object:getClass()" [color=blue,font=6];
"C:com.smartsync.error.WeatherNotFoundException" -> "java.lang.RuntimeException" [color=blue,font=6];
"C:com.smartsync.error.WeatherNotFoundException" -> "com.smartsync.error.WeatherNotFoundException" [color=blue,font=6];
"C:com.smartsync.validator.ValidationErrorBuilder" -> "java.util.Iterator" [color=blue,font=6];
"C:com.smartsync.validator.ValidationErrorBuilder" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.validator.ValidationErrorBuilder" -> "com.smartsync.validator.ValidationError" [color=blue,font=6];
"C:com.smartsync.validator.ValidationErrorBuilder" -> "java.util.List" [color=blue,font=6];
"C:com.smartsync.validator.ValidationErrorBuilder" -> "org.springframework.validation.ObjectError" [color=blue,font=6];
"C:com.smartsync.validator.ValidationErrorBuilder" -> "com.smartsync.validator.ValidationErrorBuilder" [color=blue,font=6];
"C:com.smartsync.validator.ValidationErrorBuilder" -> "org.springframework.validation.Errors" [color=blue,font=6];
"M:com.smartsync.config.WebConfig:<init>()" -> "(O)org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter:<init>()" [color=blue,font=6];
"M:com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)" -> "(M)com.smartsync.validator.ValidationError:addValidationError(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)" -> "(I)java.util.Iterator:next()" [color=blue,font=6];
"M:com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)" -> "(I)java.util.List:iterator()" [color=blue,font=6];
"M:com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)" -> "(M)org.springframework.validation.ObjectError:getDefaultMessage()" [color=blue,font=6];
"M:com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)" -> "(I)org.springframework.validation.Errors:getAllErrors()" [color=blue,font=6];
"M:com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)" -> "(O)com.smartsync.validator.ValidationError:<init>(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.validator.ValidationErrorBuilder:fromBindErrors(org.springframework.validation.Errors)" -> "(I)java.util.Iterator:hasNext()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" -> "(O)java.util.ArrayList:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" -> "(I)com.smartsync.model.WeatherInformationRepository:findByWeatherLocationId(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" -> "(I)com.smartsync.model.WeatherLocationRepository:delete(java.lang.Iterable)" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" -> "(I)com.smartsync.model.WeatherLocationRepository:findByUserId(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" -> "(I)java.util.Iterator:next()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" -> "(I)java.util.Iterator:hasNext()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" -> "(I)java.util.List:iterator()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" -> "(M)com.smartsync.model.WeatherLocation:getId()" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationsForUser(java.lang.Long)" -> "(I)com.smartsync.model.WeatherInformationRepository:delete(java.lang.Iterable)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.error.IllegalRequestFormatException:<init>(java.lang.String,java.lang.String,com.smartsync.validator.ValidationError)" -> "(O)java.lang.RuntimeException:<init>()" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "java.util.List" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "java.util.ArrayList" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "java.util.Iterator" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "com.smartsync.service.WeatherUndergroundService" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "com.smartsync.model.WeatherLocationRepository" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "com.smartsync.model.WeatherInformation" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "com.smartsync.service.WeatherService" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "com.smartsync.model.WeatherInformationRepository" [color=blue,font=6];
"C:com.smartsync.service.WeatherService" -> "com.smartsync.model.WeatherLocation" [color=blue,font=6];
"M:com.smartsync.error.ErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String)" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.error.ErrorInfo:<init>(java.lang.String,java.lang.String,java.lang.String)" -> "(O)java.util.Date:<init>()" [color=blue,font=6];
"C:com.smartsync.validator.ValidationError" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.validator.ValidationError" -> "java.util.ArrayList" [color=blue,font=6];
"C:com.smartsync.validator.ValidationError" -> "com.smartsync.validator.ValidationError" [color=blue,font=6];
"C:com.smartsync.validator.ValidationError" -> "java.util.List" [color=blue,font=6];
"M:com.smartsync.SmartsyncWeatherServiceApplication:main(java.lang.String[])" -> "(S)org.springframework.boot.SpringApplication:run(java.lang.Object,java.lang.String[])" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)" -> "(O)com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)" -> "(M)java.lang.String:replaceAll(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)" -> "(S)com.smartsync.util.HttpUtil:executeGetRequest(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:getWeatherForLocation(java.lang.String,java.lang.String)" -> "(M)java.util.logging.Logger:info(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)" -> "(O)com.smartsync.dto.WeatherUndergroundDTO:<init>(java.lang.String,double,double,double,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)" -> "(M)com.google.gson.JsonElement:getAsDouble()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)" -> "(M)com.google.gson.JsonObject:get(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)" -> "(O)com.google.gson.Gson:<init>()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)" -> "(M)com.google.gson.JsonElement:getAsJsonObject()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)" -> "(M)com.google.gson.JsonElement:getAsString()" [color=blue,font=6];
"M:com.smartsync.service.WeatherUndergroundService:jsonToWeatherUndergroundDTO(java.lang.String)" -> "(M)com.google.gson.Gson:fromJson(java.lang.String,java.lang.Class)" [color=blue,font=6];
"C:com.smartsync.model.WeatherInformationRepository" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.model.WeatherInformationRepository" -> "org.springframework.data.jpa.repository.JpaRepository" [color=blue,font=6];
"C:com.smartsync.model.WeatherInformationRepository" -> "com.smartsync.model.WeatherInformationRepository" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationById(java.lang.Long)" -> "(I)com.smartsync.model.WeatherLocationRepository:delete(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.service.WeatherService:deleteWeatherLocationById(java.lang.Long)" -> "(I)com.smartsync.model.WeatherLocationRepository:findById(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getAllWeatherInformation()" -> "(I)com.smartsync.model.WeatherInformationRepository:findAll()" [color=blue,font=6];
"M:com.smartsync.model.WeatherInformation:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.error.IllegalRequestFormatErrorInfo:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.error.WeatherNotFoundException:<init>(java.lang.String,java.lang.String)" -> "(O)java.lang.RuntimeException:<init>()" [color=blue,font=6];
"M:com.smartsync.dto.WeatherLocationDTO:<init>(java.lang.Long,java.lang.String,java.lang.String)" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.validator.ValidationError:<init>(java.lang.String)" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"M:com.smartsync.validator.ValidationError:<init>(java.lang.String)" -> "(O)java.util.ArrayList:<init>()" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "java.lang.StringBuilder" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.error.IllegalRequestFormatErrorInfo" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.model.WeatherInformation" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "org.springframework.validation.Errors" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.error.ErrorInfo" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.controller.WeatherController" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.service.WeatherService" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.error.IllegalRequestFormatException" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.service.WeatherInformationService" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "org.apache.log4j.Logger" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.dto.WeatherLocationDTO" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "org.springframework.http.HttpStatus" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.validator.WeatherValidator" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "org.springframework.http.ResponseEntity$BodyBuilder" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "communication.UserServiceCommunication" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "model.UserPOJO" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "org.springframework.http.ResponseEntity" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.validator.ValidationErrorBuilder" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.error.UserNotFoundException" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.error.WeatherNotFoundException" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "com.smartsync.model.WeatherLocation" [color=blue,font=6];
"C:com.smartsync.controller.WeatherController" -> "java.lang.Object" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationById(java.lang.Long)" -> "(O)com.smartsync.service.WeatherInformationService:updateWeatherInformation(com.smartsync.model.WeatherInformation)" [color=blue,font=6];
"M:com.smartsync.service.WeatherInformationService:getWeatherInformationById(java.lang.Long)" -> "(I)com.smartsync.model.WeatherInformationRepository:findByWeatherLocationId(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getAllWeatherInformation()" -> "(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getAllWeatherInformation()" -> "(M)com.smartsync.service.WeatherInformationService:getAllWeatherInformation()" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:toString()" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:toString()" -> "(M)java.lang.StringBuilder:append(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:toString()" -> "(M)java.lang.StringBuilder:append(char)" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:toString()" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.model.WeatherLocation:toString()" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(O)com.smartsync.error.UserNotFoundException:<init>(java.lang.String,java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(O)communication.UserServiceCommunication:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(M)org.apache.log4j.Logger:error(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.String)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(O)java.lang.StringBuilder:<init>()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(S)org.springframework.http.ResponseEntity:ok(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(M)org.apache.log4j.Logger:info(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(M)java.lang.StringBuilder:append(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(M)java.lang.StringBuilder:toString()" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(M)communication.UserServiceCommunication:getUser(java.lang.Long)" [color=blue,font=6];
"M:com.smartsync.controller.WeatherController:getWeatherInformationForUser(java.lang.Long)" -> "(M)com.smartsync.service.WeatherInformationService:getWeatherInformationForUser(java.lang.Long)" [color=blue,font=6];
"C:com.smartsync.model.WeatherLocationRepository" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.model.WeatherLocationRepository" -> "com.smartsync.model.WeatherLocationRepository" [color=blue,font=6];
"C:com.smartsync.model.WeatherLocationRepository" -> "org.springframework.data.jpa.repository.JpaRepository" [color=blue,font=6];
"M:com.smartsync.validator.WeatherValidator:supports(java.lang.Class)" -> "(M)java.lang.Object:equals(java.lang.Object)" [color=blue,font=6];
"M:com.smartsync.dto.WeatherLocationDTO:<init>()" -> "(O)java.lang.Object:<init>()" [color=blue,font=6];
"C:com.smartsync.error.IllegalRequestFormatErrorInfo" -> "java.lang.Object" [color=blue,font=6];
"C:com.smartsync.error.IllegalRequestFormatErrorInfo" -> "com.smartsync.error.IllegalRequestFormatErrorInfo" [color=blue,font=6];
"C:com.smartsync.error.IllegalRequestFormatErrorInfo" -> "com.smartsync.validator.ValidationError" [color=blue,font=6];
}
